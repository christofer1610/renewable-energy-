{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 26545,
     "status": "ok",
     "timestamp": 1745758747410,
     "user": {
      "displayName": "Gayathri .S",
      "userId": "11297272365004791321"
     },
     "user_tz": -330
    },
    "id": "9nArVtO9U79k",
    "outputId": "129920cb-ea75-4468-d4ad-abf1c9e15bbb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mounted at /content/drive\n"
     ]
    }
   ],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EG8VwFwSb2W0"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, Dense\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 10,
     "status": "ok",
     "timestamp": 1745760604221,
     "user": {
      "displayName": "Gayathri .S",
      "userId": "11297272365004791321"
     },
     "user_tz": -330
    },
    "id": "cDGBY1mOcAfA",
    "outputId": "f9894b73-4438-432b-f1ec-f7d1c575e40c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Solar_Irradiance  Wind_Speed  Temperature  Humidity  Panel_Type  \\\n",
      "0          0.614163    0.616884     0.763308  0.888716    0.765043   \n",
      "1          0.188200    0.534102     0.745467  0.453136    0.405126   \n",
      "2          0.285278    0.218269     0.245827  0.315239    0.872521   \n",
      "3          0.475927    0.164241     0.728822  0.941220    0.524708   \n",
      "4          0.954346    0.236798     0.747777  0.849518    0.022250   \n",
      "\n",
      "   Battery_Storage_Capacity  Wind_Turbine_Efficiency  Cloud_Cover  \\\n",
      "0                  0.586643                 0.341616     0.085398   \n",
      "1                  0.914815                 0.028865     0.626503   \n",
      "2                  0.320665                 0.395089     0.280752   \n",
      "3                  0.820028                 0.930481     0.507003   \n",
      "4                  0.009475                 0.626301     0.773324   \n",
      "\n",
      "   Time_of_Day    Season Energy_Output_Class  \n",
      "0     0.947031  0.537252                 Low  \n",
      "1     0.683735  0.018580                High  \n",
      "2     0.797814  0.953557            Moderate  \n",
      "3     0.176427  0.844816                 Low  \n",
      "4     0.721659  0.260545                High  \n"
     ]
    }
   ],
   "source": [
    "\n",
    "data = pd.read_csv(r\"/content/Renewable_Energy_Forecasting.csv\")\n",
    "\n",
    "\n",
    "print(data.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 524
    },
    "executionInfo": {
     "elapsed": 520,
     "status": "ok",
     "timestamp": 1745761048638,
     "user": {
      "displayName": "Gayathri .S",
      "userId": "11297272365004791321"
     },
     "user_tz": -330
    },
    "id": "p7uLNXxSd4SP",
    "outputId": "4a13efcf-7c71-4839-9f32-b19f3b38e813"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "data['Energy_Output_Class'].value_counts().plot(kind='bar', color='skyblue')\n",
    "plt.title('Energy Output Class Distribution')\n",
    "plt.xlabel('Energy Output Class')\n",
    "plt.ylabel('Count')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1745761922218,
     "user": {
      "displayName": "Gayathri .S",
      "userId": "11297272365004791321"
     },
     "user_tz": -330
    },
    "id": "RgNF9t6dhNpK",
    "outputId": "38f3c39e-24c0-4e23-8fa3-970a2e12eeac"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing Values in Features:\n",
      " Solar_Irradiance            0\n",
      "Wind_Speed                  0\n",
      "Temperature                 0\n",
      "Humidity                    0\n",
      "Panel_Type                  0\n",
      "Battery_Storage_Capacity    0\n",
      "Wind_Turbine_Efficiency     0\n",
      "Cloud_Cover                 0\n",
      "Time_of_Day                 0\n",
      "Season                      0\n",
      "dtype: int64\n",
      "\n",
      "Missing Values in Target:\n",
      " 0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Missing Values in Features:\\n\", X.isnull().sum())\n",
    "print(\"\\nMissing Values in Target:\\n\", y.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 10,
     "status": "ok",
     "timestamp": 1745761983247,
     "user": {
      "displayName": "Gayathri .S",
      "userId": "11297272365004791321"
     },
     "user_tz": -330
    },
    "id": "Npq_74o4hW3P",
    "outputId": "3ca04f5a-3ba8-43fe-e877-e016e078e6ec"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-28-4cef4839a54a>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X.fillna(X.mean(), inplace=True)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "X.fillna(X.mean(), inplace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 20,
     "status": "ok",
     "timestamp": 1745762044388,
     "user": {
      "displayName": "Gayathri .S",
      "userId": "11297272365004791321"
     },
     "user_tz": -330
    },
    "id": "L_ya_nT0hrQD",
    "outputId": "e65edd31-2d1c-4504-e55f-5ddccd592cb3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Features (X):\n",
      "    Solar_Irradiance  Wind_Speed  Temperature  Humidity  Panel_Type  \\\n",
      "0          0.614163    0.616884     0.763308  0.888716    0.765043   \n",
      "1          0.188200    0.534102     0.745467  0.453136    0.405126   \n",
      "2          0.285278    0.218269     0.245827  0.315239    0.872521   \n",
      "3          0.475927    0.164241     0.728822  0.941220    0.524708   \n",
      "4          0.954346    0.236798     0.747777  0.849518    0.022250   \n",
      "\n",
      "   Battery_Storage_Capacity  Wind_Turbine_Efficiency  Cloud_Cover  \\\n",
      "0                  0.586643                 0.341616     0.085398   \n",
      "1                  0.914815                 0.028865     0.626503   \n",
      "2                  0.320665                 0.395089     0.280752   \n",
      "3                  0.820028                 0.930481     0.507003   \n",
      "4                  0.009475                 0.626301     0.773324   \n",
      "\n",
      "   Time_of_Day    Season  \n",
      "0     0.947031  0.537252  \n",
      "1     0.683735  0.018580  \n",
      "2     0.797814  0.953557  \n",
      "3     0.176427  0.844816  \n",
      "4     0.721659  0.260545  \n",
      "\n",
      "Target (y):\n",
      " 0         Low\n",
      "1        High\n",
      "2    Moderate\n",
      "3         Low\n",
      "4        High\n",
      "Name: Energy_Output_Class, dtype: object\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Features (X):\\n\", X.head())\n",
    "print(\"\\nTarget (y):\\n\", y.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 6,
     "status": "ok",
     "timestamp": 1745762111142,
     "user": {
      "displayName": "Gayathri .S",
      "userId": "11297272365004791321"
     },
     "user_tz": -330
    },
    "id": "o5e2-algh6B9",
    "outputId": "237f50de-d6af-4c30-8f4c-7636da254a63"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Columns: Index(['Solar_Irradiance', 'Wind_Speed', 'Temperature', 'Humidity',\n",
      "       'Panel_Type', 'Battery_Storage_Capacity', 'Wind_Turbine_Efficiency',\n",
      "       'Cloud_Cover', 'Time_of_Day', 'Season', 'Energy_Output_Class'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Dataset Columns:\", data.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 675
    },
    "executionInfo": {
     "elapsed": 12628,
     "status": "ok",
     "timestamp": 1745762247051,
     "user": {
      "displayName": "Gayathri .S",
      "userId": "11297272365004791321"
     },
     "user_tz": -330
    },
    "id": "NfiKDlbViZ4e",
    "outputId": "3c4106e1-26f1-4bfb-b780-143a3b303c7d"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-34-fd20acd9ee59>:3: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.countplot(x='Panel_Type', data=data, palette='Set3')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.countplot(x='Panel_Type', data=data, palette='Set3')\n",
    "plt.title('Distribution of Panel Type')\n",
    "plt.xlabel('Panel Type')\n",
    "plt.ylabel('Count')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyMKAFl/rA/Qt0dplGPs06vC",
   "provenance": [
    {
     "file_id": "1wbYR5DtIxtmWghI9-iw8jpHhDsZnfJZa",
     "timestamp": 1745763804329
    },
    {
     "file_id": "1OLInIS5QA_ikjhB99W9CiaiYXXqvYy0G",
     "timestamp": 1745763752822
    },
    {
     "file_id": "1tiwFRbu_bFfesfY4NTjWGjfbnWZOHXdy",
     "timestamp": 1745762306518
    }
   ]
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
